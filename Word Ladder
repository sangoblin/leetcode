class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        //first we insert the start and end into the set
        dict.insert(start);
        dict.insert(end);
        
        //we should build a graph to represent the weight
        int len = dict.size(), slen = start.size();

        unordered_map<string, pair<int,bool> > idxD;
        //unordered_map<string, bool> visited;
        for (auto iter=dict.begin(); iter!=dict.end(); ++iter)
        {
            idxD[*iter].first = INT_MAX/2;
            idxD[*iter].second = false;
        }
        
        
        //int cur = 0;
        idxD[start].first = 1;
        queue<string> que;
        que.push(start);
        
        while (!que.empty())
        {
            string curS = que.front();
            que.pop();
            pair<int, bool> &tmpC = idxD[curS];
            tmpC.second = true;
            if (curS == end)
            break;
            int curL = tmpC.first;
            for (int j=0; j<slen; ++j) //change every char char by char
            {
                for (char c='a'; c<='z'; ++c)
                {
                    string tmpS = curS;
                    tmpS.replace(j, 1, 1, c);
                    auto exist = dict.find(tmpS);
                    if (exist!=dict.end())
                    {
                        pair<int, bool> &tmpP = idxD[tmpS];
                        if (!tmpP.second)
                        {
                            que.push(tmpS);
                            tmpP.first = min(tmpP.first, curL+1);
                        }
                    }
                }
            }
        }//for auto
        

        return (idxD[end].first<INT_MAX/2)?idxD[end].first:0;      
    }
};
