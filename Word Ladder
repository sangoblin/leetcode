class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        //first we insert the start and end into the set
        dict.insert(start);
        dict.insert(end);
        
        //we should build a graph to represent the weight
        int len = dict.size(), slen = start.size();

        unordered_map<string, int > idxD;
        unordered_map<string, bool> visited;
        for (auto iter=dict.begin(); iter!=dict.end(); ++iter)
        {
            idxD[*iter] = INT_MAX/2;
            visited[*iter] = false;
        }
        
        idxD[start] = 1;
        queue<string> que;
        que.push(start);
        
        while (!que.empty())
        {
            string curS = que.front();
            que.pop();
            if (curS == end)
            break;
            int curL = idxD[curS];
            for (int j=0; j<slen; ++j) //change every char char by char
            {
                for (char c='a'; c<='z'; ++c)
                {
                    string tmpS = curS;
                    tmpS.replace(j, 1, 1, c);
                    auto exist = dict.find(tmpS);
                    if (exist!=dict.end() && !visited[tmpS])
                    {
                            visited[tmpS] = true;
                            que.push(tmpS);
                            idxD[tmpS] = min(idxD[tmpS], curL+1);
                    }
                }
            }
        }//for auto        

        return (idxD[end]<INT_MAX/2)?idxD[end]:0;      
    }
};
