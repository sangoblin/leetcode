class Solution {
public:
    vector<int> getRow(int rowIndex) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int *triangle_ = new int[2*(rowIndex+1)];
        int (*triangle)[rowIndex+1] = reinterpret_cast<int (*)[rowIndex+1]>(triangle_);
        int index = 0; //used to represent whether lines used at the current moment
        memset(triangle_, 0, sizeof(int)*2*(rowIndex+1));
        
        vector<int> answer;
        if (rowIndex < 0)
        return answer;
        
        triangle[0][0] = triangle[1][0] = 1;
        
        for (int i=0; i<= rowIndex; ++i, index=1-index)
        {
            for (int j=1; j<i; ++j)
            {
                triangle[1-index][j] = triangle[index][j-1]+triangle[index][j];
            }
            triangle[1-index][i] = 1;
        }
        triangle[index][rowIndex] = 1;
        answer.assign(triangle[index], triangle[index]+rowIndex+1);
        return answer;
    }
};
