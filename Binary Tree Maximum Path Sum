/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sum;
    
    pair<int, int> searchPathSum(TreeNode *root) //first max; second max including the root
    {
 //       int max_ = INT_MIN;
        if (root == NULL)
        {
            return make_pair(0, 0);
        }
        
        pair<int, int> left = searchPathSum(root->left);
        pair<int, int> right = searchPathSum(root->right);
        max = (left.second + root->val + right.second);
        if (left.first > max)
        max_ = left.first;
        if (right.first > max)
        max_ = right.first;
        
        return make_pair(max_, max(left.second, right.second)+root->val);
    }
    
    int maxPathSum(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        sum = 0;
        sum = searchPathSum(root);
        return sum;
    }
};
